package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"app/graph/model"
	"app/graph/services"
	"context"
	"fmt"
)

// Requester is the resolver for the requester field.
func (r *friendshipResolver) Requester(ctx context.Context, obj *model.Friendship) (*model.User, error) {
	friendshipService := services.NewFriendshipService(r.DB, r.DataLoaders.FriendshipLoader)
	requesterID, err := friendshipService.GetFriendshipRequesterID(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	userService := services.NewUserService(r.DB)
	return userService.GetUserByID(ctx, requesterID)
}

// Requestee is the resolver for the requestee field.
func (r *friendshipResolver) Requestee(ctx context.Context, obj *model.Friendship) (*model.User, error) {
	friendshipService := services.NewFriendshipService(r.DB, r.DataLoaders.FriendshipLoader)
	requesteeID, err := friendshipService.GetFriendshipRequesteeID(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	userService := services.NewUserService(r.DB)
	return userService.GetUserByID(ctx, requesteeID)
}

// WorkoutLog is the resolver for the workoutLog field.
func (r *setLogResolver) WorkoutLog(ctx context.Context, obj *model.SetLog) (*model.WorkoutLog, error) {
	panic(fmt.Errorf("not implemented: WorkoutLog - workoutLog"))
}

// WorkoutType is the resolver for the workoutType field.
func (r *setLogResolver) WorkoutType(ctx context.Context, obj *model.SetLog) (*model.WorkoutType, error) {
	panic(fmt.Errorf("not implemented: WorkoutType - workoutType"))
}

// Profile is the resolver for the profile field.
func (r *userResolver) Profile(ctx context.Context, obj *model.User) (*model.Profile, error) {
	profileService := services.NewProfileService(r.DB, r.DataLoaders.ProfileLoader)
	return profileService.GetProfileByUserID(ctx, obj.ID)
}

// WorkoutLogs is the resolver for the workoutLogs field.
func (r *userResolver) WorkoutLogs(ctx context.Context, obj *model.User) ([]*model.WorkoutLog, error) {
	workoutLogService := services.NewWorkoutLogsService(r.DataLoaders.WorkoutLogLoader)
	return workoutLogService.GetWorkoutLogs(ctx, obj.ID)
}

// Friends is the resolver for the friends field.
func (r *userResolver) Friends(ctx context.Context, obj *model.User) ([]*model.User, error) {
	friendshipService := services.NewFriendshipService(r.DB, r.DataLoaders.FriendshipLoader)
	return friendshipService.GetFriends(ctx, obj.ID)
}

// FriendshipRequests is the resolver for the friendshipRequests field.
func (r *userResolver) FriendshipRequests(ctx context.Context, obj *model.User) ([]*model.Friendship, error) {
	friendshipService := services.NewFriendshipService(r.DB, r.DataLoaders.FriendshipLoader)
	return friendshipService.GetFriendshipRequests(ctx, obj.ID)
}

// RecommendedUsers is the resolver for the recommendedUsers field.
func (r *userResolver) RecommendedUsers(ctx context.Context, obj *model.User) ([]*model.User, error) {
	friendshipService := services.NewFriendshipService(r.DB, r.DataLoaders.FriendshipLoader)
	return friendshipService.GetRecommendedUsers(ctx, obj.ID)
}

// SetLogs is the resolver for the setLogs field.
func (r *workoutLogResolver) SetLogs(ctx context.Context, obj *model.WorkoutLog) ([]*model.SetLog, error) {
	panic(fmt.Errorf("not implemented: SetLogs - setLogs"))
}

// SetLogs is the resolver for the setLogs field.
func (r *workoutTypeResolver) SetLogs(ctx context.Context, obj *model.WorkoutType) ([]*model.SetLog, error) {
	panic(fmt.Errorf("not implemented: SetLogs - setLogs"))
}

// Friendship returns FriendshipResolver implementation.
func (r *Resolver) Friendship() FriendshipResolver { return &friendshipResolver{r} }

// SetLog returns SetLogResolver implementation.
func (r *Resolver) SetLog() SetLogResolver { return &setLogResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// WorkoutLog returns WorkoutLogResolver implementation.
func (r *Resolver) WorkoutLog() WorkoutLogResolver { return &workoutLogResolver{r} }

// WorkoutType returns WorkoutTypeResolver implementation.
func (r *Resolver) WorkoutType() WorkoutTypeResolver { return &workoutTypeResolver{r} }

type friendshipResolver struct{ *Resolver }
type setLogResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type workoutLogResolver struct{ *Resolver }
type workoutTypeResolver struct{ *Resolver }
